class HandleRequests l =
  let F @ () (interested,token,toreply) =
    if interested
    then {}
    else {send_token (getOtherProc l) ()}
  in F o (Request,PrState)
;;

class HandleUseSR l =
  let F l client (interested,token,toreply) =
    if interested
    then {send_busy client ()}
    else if token
    then {send_enter_sr sr l}
    else {send_request (getOtherProc l) ()}
  in F o (UseSR,PrState)
;;

class HandleToken =
  let F l () _ = {send_enter_sr sr l}
  in F o (Token,PrState)
;;

class HandleLeaveSR l =
  let F @ () (interested,token,toreply) =
    if toreply
    then {send_token (getOtherProc l) ()}
    else {}
  in F o (LeaveSR,PrState)
;;

class P l = HandleRequests l
       || HandleUseSR l
       || HandleToken
       || HandleLeaveSR l
;;

main OnLoc(P) @ {proc1;proc2}
