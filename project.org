
* Master thesis

This document briefly explains my master thesis and outlines
the steps towards the final implementation and document.

** Abstract

In a distributed system with many nodes the problem of snychronization between the nodes
and the correct new state of the system arises. Also, fault-tolerance is an important issue
if the system handles critical infrastructure and a failure of the system could lead to
far-reaching consequences. 
Most consensus protocols are build on the first description from Leslie Lamport in the
paper "The byzantine generals problem" to detect failures in some system 
and the [[https://lamport.azurewebsites.net/pubs/lamport-paxos.pdf][Paxos]] algorithms as an attempt to handle such cases.
Since then, many papers are produced to explain and adjust the protocol to make it
more easy to implement and understand.
[[https://raft.github.io][RAFT]] is a new consensus protocol build from scratch by Diego Ongaro to provide an algorithm
which is easy to understand and more elaborated to get easily implemented.

This master thesis takes the RAFT protocol and tries to implement it within [[https://github.com/vrahli/Velisarios][Velisarios]]
an implementation of the [[http://www.nuprl.org/documents/Bickford/TechReportCLEinCTT.pdf][Logic of Events]]. The logic is implemented in the proof management
system [[https://coq.inria.fr/][COQ]]. This combination allows to implement protocols which can be proofed for correctness
and used in the real world through code generation. 
The scope of this thesis handles with the basic implementation of RAFT which means that the 
correctness proofs are left out and the usage in the real world is left for the future. 

** Milestone

The thesis milestones are split into two parts. The first parts deals with the implementation
and evaluation of the protocol and the second part is about the writing needed for a master thesis.

The parts are partly filled with things left undone or workarounds and hints.

*** Implementation [4/10]

The implementation is growing and all todo's are already touched but
most part has to be finalized. The exceptions are leader election and benchmarking/evaluation.

The raft protocol is split into three parts. The first part is the leader election, the second
the log replication and the third the safety properties. The last part is not touched by this thesis.

**** DONE Basic setup 
     CLOSED: [2019-09-23 Mo 10:41]

     There are two main parts: 
     The latex directory for the writting stuff and the raft directory
     for the implementation.
     
     Velisarios is added as submodule for reference but is copied into
     the raft directory for development.

**** DONE Leader Election [5/5]
     CLOSED: [2019-10-14 Mo 13:42]

     The parts can be viewed by running RaftTestInit and RaftTestElection.
     Undone are Cluster membership changes, Leadership transfer extension

***** DONE state transitions (follower, leader, candidate)

***** DONE Term handling

***** DONE init and timer msg
      
      The init messages are added to the protocol to provide a system boot.

***** DONE issue request vote

***** DONE handle request vote

***** DONE handle request vote responses
      CLOSED: [2019-10-14 Mo 12:55]

***** DONE Heartbeat
      The heartbeat is send every time and no differentiation between
      normal append entry messages and heartbeat messages is done.


**** TODO Log replication [1/4]

     This parts can be viewed by running RaftTest.
     Undone are Log compaction, read-only queries

***** DONE issue replicate to other nodes log and handle replicate messages

***** TODO handle replicate response

***** TODO commit to leaders internal state machine

***** TODO commit to others internal state machines

***** TODO response to client

**** DONE Internal forwarding
     CLOSED: [2019-09-23 Mo 10:47]
     
     The paper proposes that nodes reject messages from 
     client with hints to the current leader.

**** DONE Client registering
     CLOSED: [2019-10-14 Mo 15:50]

     A client opens a session. A session is hold as long as the system runs.
     A special broadcast message is used, the paper propeses that appendentry calls are used,
     to replicate the sessions across the network.

**** TODO Client request caching
     The already processed requests are fetched.

**** TODO Message queue handling
     partialy

**** TODO resend messages

     Messsages which gets no repsonds after time t
     gets resend indefinitly.
     Replicate and RequestVote gets resend.
     

**** TODO Testing [2/7]
partialy, currently only the simulator with test changed by hand

***** DONE lib/Simulator.ml, provide general simulator handling

***** DONE lib/Test.ml, provide general test handling

***** TODO lib/Client.ml, provide a general protocol client

***** TODO lib/Server.ml, provide a general protocol server

***** TODO Test split election

***** TODO Test reeletion

***** TODO Test normal election + heartbeat

**** TODO Benchmarking Ideas [/]

***** TODO implement same sm as pbft

***** TODO count messages in the protocol

***** TODO find more ideas

*** Writing [3/9]

    The first attempt was done in german.

**** DONE Latex setup
     CLOSED: [2019-09-23 Mo 10:48]

**** DONE change setup to english
     CLOSED: [2019-10-14 Mo 13:33]

**** DONE TOC
     CLOSED: [2019-10-14 Mo 13:34]
     
     This means the abitrary parts of the document.
     Table of figures, abbreviations etc.

**** TODO introduction
in german

**** TODO basics, logic
in german

**** TODO basics, coq and velisarios

**** TODO description of the implementation

**** TODO evaluation

**** TODO conclusion and further steps

*** Other Ideas

    Maybe use the c3p auditorium for a presentation about consensus protocols and
    proved programming. The COQ Ocaml Interface.








