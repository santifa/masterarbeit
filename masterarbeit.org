

* Neuplanung Masterarbeit

** Thema: Implementierung von RAFT in Velisarios.

RAFT ist ein Zensusprotokoll zur Bestimmung des nächsten Zustands
einesverteilten System. Es wurde neu entworfen, um bekannte Verständnisprobleme bei
vorherigen Problemen zu beseitigen.

Velisarios ist eine Erweiterung des Beweissystems COQ um die Logic of Events.
Damit ist es möglich Programme konstruktiv zu beschreiben und zu beweisen.
Im letzten Schritt kann aus der Spezifikation Quellcode in verschiedenen
Programmiersprachen generiert werden.

** verläufige Gliederung

| Nummer | Titel                               | Kurzbeschreibung                                                                                                   |   Seiten |
|--------+-------------------------------------+--------------------------------------------------------------------------------------------------------------------+----------|
|      0 | Einleitung                          | Einführung in die Thematik, herleitung aus den Bedürfnissen für verteilte Systeme und ihrer Komplexität.           |      1-2 |
|      1 | Logikgrundlagen                     | Darstellung der Grundlagen, Aussagenlogik, Prädikatenlogik, Typentheorie, Logic of Events                          |        5 |
|      2 | RAFT Protokoll                      | Vorstellung & Erklärung des RAFT Protokolls                                                                        |        5 |
|      3 | Beweissystem COQ                    | Kurze Einführung in die benutzten Mechanismen in COQ (Programmspezifikation, Quellcodeextraction)                  |        3 |
|      4 | Implementierung RAFT mit Velisarios | Darstellung von Teilen des Codes, besondere Punkte bei der Implementierung, Extraction in Quellcode und Simulation |        5 |
|      5 | Auswertung und Simulation[fn:1]     | Analyse des Algorithmus + Statistik und Auswertung nach zu bestimmenden Kriterien                                  |        3 |
|      6 | Fazit und Schluss                   | Ausblick in nächste Schritte und Zusammenfassung der Arbeit                                                        |      1-2 |
|  Summe |                                     |                                                                                                                    | 23[fn:2] |

** Zeitplanung [%]

Neuer Zeitplan von Mitte April bis Ende September,
eine frühere Fertigstellung wird angestrebt.


*** TODO Einleitung neu schreiben
    SCHEDULED: <2019-04-25 Do>
    Bezug auf Vereteilte System und Wichtigkeit dieser.
    Schwierigkeiten bei der Implementierung, Verweis auf RAFT Argumente
*** Zeitraum <2019-04-25 Do>--<2019-09-30 Mo>
    "Neubegin Masterarbeit"

**** TODO Programmierung RAFT mit Velisarios <2019-04-25 Do>--<2019-06-15 Sa>

**** TODO Simluation? <2019-06-15 Sa>--<2019-07-06 Sa>

**** TODO Einleitung + Grundlagen <2019-07-06 Sa>--<2019-07-20 Sa>

**** TODO Beschreibung Velisarios + Raft <2019-07-20 Sa>--<2019-08-10 Sa>

**** TODO Beschreibung Implementierung <2019-08-10 Sa>--<2019-08-31 Sa>

**** TODO Simulation & Auswertung <2019-08-31 Sa>--<2019-09-14 Sa>

**** TODO Fazit und Schluss <2019-09-14 Sa>--<2019-09-21 Sa>

**** TODO Korrekturen, Verzeichnisse, Code Cleanup <2019-09-21 Sa>--<2019-09-30 Mo>

* Notizen
** Velisarios Notizen

Probleme bei nocrypto:

#+begin_src
ocamlfind ocamldep -package cstruct.lwt
ocamlfind: Package `cstruct.lwt' not found
#+end_src

Neuinstallieren hilft nicht, nocrypto vorrausetzung für runtime

** Entwicklung

Bei der Entwicklung mit Emacs empfiehlt sich [[https://proofgeneral.github.io][Proof General]] und [[https://github.com/cpitclaudel/company-coq][Company COQ]].

*** Proof mode zeigt Tooltip und Buffer gleichzeitig                   :TODO:

*** Treemacs davon abhalten Dateien anzuzeigen die in .gitignore sind

#+BEGIN_SRC
(with-eval-after-load 'treemacs
  (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))
#+END_SRC

*** Api Outline generieren

Dieses Skript generiert eine "API" oder Outline der Vernacular Dateien im ~src~ Ordner.
Dabei werden nur ~Definition, Inductive, Instance, Lemma~ zur Generierung benutzt.
C-c C-c

#+BEGIN_SRC sh

  function get_signatures() {
      echo "## ${1##*/}" >> "${2}"
      fmt "${1}" "${2}" "Definition"
      fmt "${1}" "${2}" "Inductive"
      fmt "${1}" "${2}" "Instance"
      fmt "${1}" "${2}" "Lemma"
  }

  function fmt() {
      if [[ ! -z $(grep "${3}" "${1}") ]]; then
          echo -e "### ${3}\n\n" >> "${2}"
          sed -n "/$3/,/\./p" "${1}" | sed 's/^ */    /g;s/\./\.\n/g' >> "${2}"
      fi
  }

  cd raft/
  find . -name Api.md -delete

  find . -name "*.v" -print0 | while IFS= read -r -d '' file; do
      api="${file%/*}/Api.md"
      if [ ! -e "${api}" ]; then
          echo -e "# API Documentation file\n" > "${api}"
          echo -e "It gives a rough overview about the provided types, lemmas and definitions.\n" >> "${api}"
      fi
      get_signatures "${file}" "${api}"
  done

#+END_SRC

#+RESULTS:


* Footnotes

[fn:2] Wie viele Seiten Minimum?

[fn:1] Überhaupt auswerten? Welche Kriterien (Geschwindigkeit, Sicherheit)???


* -------------------------------------
  nachfolgender Abschnitt veraltet

* Besprechungen

** <2018-09-11 Di> Erstbesprechung (Skype)

vollständige Präsentation über Eigenschaften von verteilten Systemen
 - Ziel + Eigenschaften von Kommunikationssystemen
*** EventML + Logik Paper lesen
*** EentML zum laufen bringen
*** PingPong Beispiel

** <2018-09-21 Fr> 2. Besprechung (Skype)

   Mögliche Themen
   - Beschreibung Prozess
   - Transformation von Lisp zu anderer Sprache
   - Anbindung an anderen Simulator
   - Anbindung anderer Beweiser (GPM + LoE erforderlich)

*** Shar Paper Referenz schicken

<2018-10-15 Mo> Kreitz wieder in Potsdam, Kommunikation davor über Mail

* Masterarbeit Gliederung

Thema der Masterarbeit ist die Beschreibung von EventML in seinen einzelnen Bestandteilen
mit Vertiefung eines Preozssschrittes. Dabei sollen die einzelnen Teile ausführlich
dargestellt werden und mit Beispielen unterfüttert werden.

** Motivation: Anwendung in Kommunikationsprotokollen
*** Paxos Protokoll + Bedeutung + Anwendung + Ziele/Eigenschaften verteilter Systeme

** Einführung Logik of Events
*** Prädikatenlogik + Events + konstruktive Eigenschaften

** Paxos Konsens Protokoll
*** Verstehen
*** Eigenschaften + Beweise

** Anbindung an Nuprl für Beweise

** Transformation Ml -> Lisp -> Bytecode

** Simulation

* Notizen/Todos [3/5] [60%]

 - [X] Zeitplan schreiben
 - [ ] Alup 2 Prüfung innerhalb Masterarbeit
 - [X] Zugang Nuprl Cornell University
 - [ ] PingPong Beispiel
 - [X] Vincent Rahli wegen PingPong schreiben


*** EventML installieren

#+BEGIN_SRC sh
  mkdir eventml
  cd eventml
  wget http://www.nuprl.org/software/eventml/eventml_0.3-src.tar.gz
  tar xvf eventml_0.3-src.tar.gz
  make
#+END_SRC

Makefile öffnen und im Ziel ~install-doc:~ ~esharp-language.pdf~
zu ~esharp-language.dvi~ ändern. Bei Fehlern die Datei ~docs/manual/esharp-language.tex~
entsprechend ändern.

`lib/liballdefs` wird nicht gefunden - extrahieren, da es als tgz ausgeliefert wird
`/etc/ImageMagic-7/policy.xml` ändern und für eps rights="none" -> rights="read | write"

EventML cli:
als erstes element wird der absolute pfad erwartet

konvertierung von eventml -> nuprl asciiterms
eventml /home/ratzeputz/Entwicklung/repos/masterarbeit/code/pingpong.el -lib eventml/lib/alldefs.eml -o pingpong.el.nuprl -t 3600000 --nuprl



** Umgang mit Nuprl + EventMl

#+BEGIN_SRC sh
  ssh -i .ssh/nuprl.cs.cornell.edu -L 5906:localhost:5906 henrik@nuprl.cs.cornell.edu
  vinagere
#+END_SRC

Verbinde mit localhost:5906 mit pw nuprlvnc

* TODO Zeitplan [1/8] [12%]

Insgesamt stehen 6 Monate zur Verfügung
in insgesamt 26 Einheiten/KW aufgeteilt.
Begin: <2018-10-15 Mo>  42 KW

** DONE Recherche <2018-10-15 Mo>--<2018-11-16 Fr> (5E)
   CLOSED: [2018-12-17 Mo 16:26]
   - Paxos, Motivationsschreiben
   - Grundlagen Logik
   - Relevante Quellen für EventML (Logik, Programmierung, Beispiele)

** TODO Einführung Schreiben <2018-11-16 Fr>--<2018-11-30 Fr> (2E)
   - Motivationsschreiben / Themeneinleitung
   - Grundlagen?

** TODO Beispiele in EventML <2018-11-30 Fr>--<2018-12-14 Fr> (2E)
   - kleine Beispiele für Basiselemente von EventML
   - Testen Kombination aus EventML Nuprl

** TODO Einführung EventML schreiben <2018-12-14 Fr>--<2018-12-31 Mo> (2E)
   - Grundlagen Logik für EventML
   - Beschreibung EventMl Sprache
   - Einbung einfacher Beispiele

** TODO Untersuchung Transformations <2018-12-31 Mo>--<2019-01-31 Do> (4E)
   - Transformation von EventML -> Lisp
   - Einbindung von Nuprl in EventML Transformationsprozess/Programmierung
   - Transformation von Lisp -> Bytecode
   - Beispiele für den Prozess (Schritte)
   - Mögliche Vertiefung durch Prozesserleichterung (UI) -> Anwendbarkeit verbessern
   - Beweise über EventML Eigenschaften

** Transformationsprozess schreiben <2019-01-31 Do>--<2019-02-15 Fr> (2E) 17
   - Transformationsprozess beschreiben
   - Unterfüttern mit Beispielen, Schrittweise
   - Beschreibung der Vorgehensweise bei Beweisen über Eigenschaften von EventML Programmen mit Nuprl

** TODO Simulation von Beispielen <2019-02-15 Fr>--<2019-03-15 Fr> (2E)
   - Beispiele für die Simulation von EventMl
   - reale Anwendbarkeit untersuchen/reale Beispiele

** TODO Simulationsprozess schreiben <2019-03-15 Fr>--<2019-04-05 Fr> (2E)

** TODO Finishing <2019-04-05 Fr>--<2019-05-10 Fr> (5E)
   - Reinschrift
   - Rechtschreibkontrolle, Gramatik, Verständlichkeit, Index...

* Recherche

[[http://www.cs.ru.nl/~freek/100/][100 Theoreme und welche formalisiert sind]]
[[https://github.com/adjoint-io/raft%0A][Raft Consensus]]

** Paxos made simple - Lamport - 2001

wichtige Referenzen:
  - The part-time parliament - Lamport
  - Thime, clocks, and the ordering of events in a distributed system - Lamport

*** Protokoll
_Rahmenbedingungen:_

Annahme: Mehrere Prozesse können Werte vorschlagen.
Ein Konensalgorithumus stellt sicher, dass ein vorgeschlagener Wert gewählt wird.
Wird kein Wert vorgeschlagen, wird keiner gewählt und wenn einer gewählt wird, dann
ist dieser Konsens unter allen Prozessen.

Sicherheitsanforderungen:
 - S1: Nur vorgeschlagene Werte können gewählt werden
 - S2: Nur ein Wert wird gewählt
 - S3: Ein Wert ist erst dann gewählt, wenn er wirklich gewählt ist

Rollen: (ein Prozess kann mehrere Rollen haben)
Proposer: Schlägt Werte vor
Acceptor: Akzeptiert Werte
Learner: Stellt fest ob ein Wert von einer Mehrheit akzeptiert wurde

Kommunikation zwischen Prozessen über Message Passing mit folgenden Einschränkungen:
 - Nachrichten können lange brauchen, dupliziert werden, verloren gehen (nicht korumpiert)
 - Prozesse arbeiten willkürlich schnell, können neustarten oder stoppen
 - Wenn alle Prozesse ausfallen und schon ein Wert gewählt wurde, ist dieser Zustand verloren,
   solange kein Prozess mehr Informationen hat.

=> Sonderfälle, wie nur ein Acceptor, werden nicht berücksichtigt.

Ein Wert ist gewählt, wenn ein Mehrheit von Acceptors diesen Wert akzeptiert hat.
Bedingung: dass ein Acceptor nur einen Wert akzeptieren kann.
-> Alle zwei Mehrheiten haben ein Akzeptor gemeinsam -> sie sind Teil einer größeren Mehrheit

_Ablauf:_

Wert: $v$, Accpetor: $a \in A$ , Proposer: $p \in P$, Learner: $l \in L$,

Eigenschaft 0: Damit ein v gewählt wird, muss eine Mehrheit $A_m \subseteq A$ existieren, die v akzeptiert hat.
Eigenschaft 1: a akzeptiert den 1. ankommenden Vorschlag
-> Problem: Gleichzeitigkeit; Wenn jeder $a_n$ ein $v_n$ akzeptiert, dann kann keine Mehrheit entstehen
-> Lösung: a darf mehrere Vorschläge akzeptieren, Vorschläge werden durchnummeriert
(disjoint set of numbers per proposer)

Eigenschaft 2: Wenn ein Vorschlag mit Wert v und Nummer i gewählt wurde,
               dann hat jeder Vorschlag i+x auch den Wert v. (Erfüllt S2)

Eigenschaft 2a: Wenn ein Vorschlag mit Wert v und Nummer i gewählt wurde,
                dann hat jeder von einem a akzeptierte Vorschlag i+x den Wert v.
-> Damit E1 E2a nicht verletzt

Eigenschaft 2b: Wenn ein Vorschlag mit Wert v und Nummer i gewählt wurde,
                dann jeder von einem p vorgebrachte Vorschlag i+x den Wert v.

Eigenschaft 2c: Für jeden Vorschlag n mit Wert v, existiert eine Mehrheit $A_S$
                für die gilt, dass (i) kein $a \in A_S$ keinen Vorschlag i < n angenommen hat
                oder (ii) v ist der höchste Wert aller Vorschläge i < n, der von einem $a \in A_S$
                angenommen wurden.

=> Ein p muss höchste Vorschlagsnummer n erfahren um Vorschlag n+1 zu tätigen.

*Proposer*
/Prepare Request/
1. p wählt Vorschlagsnummer n und sendet die Anfrage an eine Menge $a \in A$
2. Anwtortmöglichkeiten:
  (i) Constraint, dass a kein Vorschlag i mit i < n akzeptiert
  (ii) den größten Vorschlag i < n der akzeptiert wurde
/Accept Request/
Wenn p von einer Mehrheit (i) zurückbekommt, kann es das akzeptieren des Vorschlags anfordern.

*Acceptor*
1. Jede Anfrage kann ignoriert werden, ohne Einschränkungen
2. Jeder Prepare Request kann beantwortet werden
Eigenschaft 1a: Ein a kann jeden Vorschlag n akzeptieren, wenn und nur wenn es
                auf keinen Prepare Request i mit i > n geantwortet hat.

Optimierung:
- a merkt sich nur den höchsten Vorschlag n und ignoriert Prepare Request i < n
- a ignoriert Prepare Request n, wenn n schon akzeptiert ist

_Algorithmus:_

Phase 1:
1. p wählt Vorschlagsnummer n und sendet Prepare Request an $A_m \subseteq A$
2. Wenn a ein Prepare Request n, der größer als alle bisherigen ist, dann
   antwortet a mit dem Versprechen keine Vorschläge unter n zu akzeptieren und
   mit dem höchsten von a akzeptierten Vorschlag.
Phase 2:
1. Wenn p eine Antwort auf ein Prepare Request von einer Mehrheit $A_m$ erhält,
   dann sendet er Accept Requests an alle $a_i \in A_m$ mit dem Vorschlag (n, v).
   Wobei v der Wert des höchsten Vorschlags unter den Antworten ist (oder jeder wenn keine Antworten).
2. Wenn a ein Accept Request n erhält, akzeptiert er den Vorschlag, wenn er vorher nicht
   ein Prepare Request i > n beantwortet hat.

_Lernen:_
Ein l muss herausfinden das ein Wert v von einer Mehrheit gewählt wurde.

Eine Menge von ausgwählten Learners erhält von a den Vorschlag, wenn dieser von a akzeptiert wurde.
Andere Learner erfahren von akzeptierte Werte durch die ausgwählten Learnern.

_Fortschritt:_
Um gegenseitiges überbieten/unterbrechen zu verhindern, wird ein besonderer p ausgewählt,
der als einziges Vorschläge machen darf.


** Paxos Made Moderatly Complex - van Renesse - 2011

wichtige Referenzen:
- How to build highly available systems using consensus - Lampson

Beispielsysteme für Multi-Paxos: Chubby, Zookeeper

_Muli-Paxos:_

Ein Client $k$ sendet Kommandos $c$ an ein Netz von Servern $S$.
Ein Kommand is ein Tripel $c = <k,cid,operation>$, wobei $k$ die ID
des Clients ist, $cid$ eine eindeutige Sequenznummer für $c$ und $operation$
die Zustandstransition angibt.

Server $s \in S$ sind DEA's die mit Hilfe von SMR (State Machine Replication) gespiegelt werden.
Problem: Mehrere Clients können zum selben Zeitpunkt Kommandos an alle Server senden. Wie ist die Reihenfolge
         in der die Kommandos abgearbeitet werden? Lösung, Multi-Paxos.



** The Byzantine Generals Problem

Erst ab 4 "Generälen" kann man einen Verräter entlarven.
Dabei bilden die Generäle ein vermaschtes Netzwerk und schicken sich gegenseitig die Befehle,
die sie von anderen erhalten haben (gleiches Problem: 1 General und 2 Leutnants). Alle Nachrichten von anderen
Generälen werden als Wahlstimmen angenommen und per Mehrheitsentscheidung wird die Handlung gewählt.

** A Logic of Events - Bickford, Constable - 2003

Einleitung:
